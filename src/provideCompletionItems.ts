import * as vscode from "vscode";
import { streamCompletion } from "./streamUtils";

export async function provideCompletionItems(
  document: vscode.TextDocument,
  position: vscode.Position
): Promise<vscode.CompletionItem[]> {
  const config = vscode.workspace.getConfiguration("cursor-llm-autocomplete");
  const apiEndpoint = config.get<string>(
    "apiEndpoint",
    "http://localhost:11434/api/generate"
  );
  const model = config.get<string>("model", "qwen2.5-coder");
  const maxContextLength = config.get<number>("maxContextLength", 1000);

  // Get context (limit to maxContextLength)
  const range = new vscode.Range(new vscode.Position(0, 0), position);
  let textBeforeCursor = document.getText(range);
  if (textBeforeCursor.length > maxContextLength) {
    textBeforeCursor = textBeforeCursor.slice(-maxContextLength);
  }
  const prompt = textBeforeCursor;

  try {
    const completionText = await streamCompletion(prompt, apiEndpoint, model);
    if (!completionText) {
      return [];
    }

    const completionItem = new vscode.CompletionItem(
      completionText,
      determineCompletionKind(completionText)
    );
    completionItem.insertText = new vscode.SnippetString(completionText);
    completionItem.detail = `Generated by ${model} (Ollama)`;
    completionItem.range = new vscode.Range(position, position);
    completionItem.documentation = new vscode.MarkdownString(
      `AI-generated code suggestion based on the context.`
    );

    return [completionItem];
  } catch (error) {
    console.error("Error calling Ollama API:", error);
    vscode.window.showErrorMessage(
      "Failed to fetch LLM completion. Ensure Ollama is running."
    );
    return [];
  }
}

// Helper to determine completion kind based on content
function determineCompletionKind(text: string): vscode.CompletionItemKind {
  if (text.includes("function") || text.includes("def ")) {
    return vscode.CompletionItemKind.Function;
  } else if (text.match(/^[a-zA-Z_][a-zA-Z0-9_]*$/)) {
    return vscode.CompletionItemKind.Variable;
  } else if (text.match(/^(if|for|while|class|import|from)\b/)) {
    return vscode.CompletionItemKind.Keyword;
  }
  return vscode.CompletionItemKind.Snippet;
}
