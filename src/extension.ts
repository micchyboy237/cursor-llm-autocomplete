import * as vscode from "vscode";
import axios from "axios";

export function activate(context: vscode.ExtensionContext) {
  const provider = vscode.languages.registerCompletionItemProvider(
    ["python", "javascript", "typescript"],
    {
      async provideCompletionItems(
        document: vscode.TextDocument,
        position: vscode.Position
      ) {
        // Get the text up to the cursor
        const range = new vscode.Range(new vscode.Position(0, 0), position);
        const textBeforeCursor = document.getText(range);

        // Prepare the prompt for the LLM
        const prompt = textBeforeCursor;

        try {
          // Call the Ollama API
          const response = await axios.post(
            "http://localhost:11434/api/generate",
            {
              model: "qwen2.5-coder",
              stream: true,
              prompt: prompt,
            },
            {
              responseType: "stream",
            }
          );

          let completionText = "";
          const stream = response.data;

          // Handle streaming response
          return new Promise<vscode.CompletionItem[]>((resolve) => {
            stream.on("data", (chunk: Buffer) => {
              const chunkStr = chunk.toString();
              // Split by newlines to handle multiple JSON objects
              const lines = chunkStr.split("\n").filter((line) => line.trim());
              for (const line of lines) {
                try {
                  const json = JSON.parse(line);
                  if (json.response) {
                    completionText += json.response;
                  }
                } catch (e) {
                  console.error("Error parsing JSON chunk:", e);
                }
              }
            });

            stream.on("end", () => {
              if (!completionText) {
                resolve([]);
                return;
              }

              // Create a completion item
              const completionItem = new vscode.CompletionItem(
                completionText,
                vscode.CompletionItemKind.Snippet
              );
              completionItem.insertText = new vscode.SnippetString(
                completionText
              );
              completionItem.detail = "Generated by Qwen2.5-Coder (Ollama)";

              // Set the range to replace (optional, can be empty)
              completionItem.range = new vscode.Range(position, position);

              resolve([completionItem]);
            });

            stream.on("error", (err: any) => {
              console.error("Stream error:", err);
              resolve([]);
            });
          });
        } catch (error) {
          console.error("Error calling Ollama API:", error);
          return [];
        }
      },
    },
    "" // Trigger on any character (can be customized, e.g., '.')
  );

  context.subscriptions.push(provider);
}

export function deactivate() {}
